package main

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/Mikhalevich/argparser"
	_ "github.com/lib/pq"
)

type DBParams struct {
	User     string `json:"user"`
	Password string `json:"pwd"`
	DBName   string `json:"db_name"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	SSLMode  string `json:"sslmode"`
}

func NewDBParams() *DBParams {
	return &DBParams{
		User:     "postgres",
		Password: "",
		DBName:   "Test",
		Host:     "localhost",
		Port:     5432,
		SSLMode:  "disable",
	}
}

func (p DBParams) connectionString() string {
	return fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%d sslmode=%s", p.User, p.Password, p.DBName, p.Host, p.Port, p.SSLMode)
}

type Params struct {
	DB DBParams `json:"db"`
}

func NewParams() *Params {
	return &Params{
		DB: *NewDBParams(),
	}
}

func loadParams() (*Params, error) {
	basicParams := NewParams()
	parser := argparser.NewParser()
	params, err, gen := parser.Parse(basicParams)

	if gen {
		return nil, errors.New("Config should be autogenerated")
	}

	return params.(*Params), err
}

func checkDB(connStr string) error {
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return err
	}
	defer db.Close()

	row := db.QueryRow("select version()")

	version := ""
	err = row.Scan(&version)
	if err != nil {
		return err
	}

	fmt.Println("******************************************")
	fmt.Println(version)
	fmt.Println("******************************************")

	return nil
}

func main() {
	params, err := loadParams()
	if err != nil {
		fmt.Println(err)
		return
	}

	err = checkDB(params.DB.connectionString())
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(params)
}
