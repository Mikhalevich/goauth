package main

import (
	"errors"
	"fmt"

	"github.com/Mikhalevich/argparser"
	"github.com/Mikhalevich/goauth"
	"github.com/Mikhalevich/goauth/db"
)

type DBParams struct {
	User     string `json:"user"`
	Password string `json:"pwd"`
	DBName   string `json:"db_name"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	SSLMode  string `json:"sslmode"`
}

func NewDBParams() *DBParams {
	return &DBParams{
		User:     "postgres",
		Password: "",
		DBName:   "Test",
		Host:     "localhost",
		Port:     5432,
		SSLMode:  "disable",
	}
}

func (p DBParams) connectionString() string {
	return fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%d sslmode=%s", p.User, p.Password, p.DBName, p.Host, p.Port, p.SSLMode)
}

type Params struct {
	DB DBParams `json:"db"`
}

func NewParams() *Params {
	return &Params{
		DB: *NewDBParams(),
	}
}

func loadParams() (*Params, error) {
	basicParams := NewParams()
	parser := argparser.NewParser()
	params, err, gen := parser.Parse(basicParams)

	if gen {
		return nil, errors.New("Config should be autogenerated")
	}

	return params.(*Params), err
}

func main() {
	params, err := loadParams()
	if err != nil {
		fmt.Println(err)
		return
	}

	pg, err := db.NewPostgres(db.PGParams{DBName: params.DB.DBName, User: params.DB.User, Password: params.DB.Password, Host: params.DB.Host, Port: params.DB.Port, SSLMode: params.DB.SSLMode})
	if err != nil {
		fmt.Println(err)
		return
	}
	defer pg.Close()

	u := &goauth.User{
		Name: "first",
		Pwd:  "first_pwd",
	}
	err = pg.Add(u)
	if err != nil {
		fmt.Println(err)
		return
	}

	err = pg.AddEmail(u.ID, goauth.Email{
		Email:    "first@gmail.com",
		Verified: false,
		Primary:  true,
	})
	if err != nil {
		fmt.Println(err)
		return
	}

	u = &goauth.User{
		Name:     "third",
		Pwd:      "third_pwd",
		Emails:   []goauth.Email{goauth.Email{Email: "third@gmail.com", Verified: true, Primary: false}},
		Sessions: []goauth.Session{goauth.Session{Name: "third_session", Value: "third_value", Expires: 42}},
	}
	err = pg.Add(u)
	if err != nil {
		fmt.Println(err)
		return
	}

	u1, err := pg.GetByName("first")
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(u1)

	u2, err := pg.GetByName("third")
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(u2)

	u3, err := pg.GetByName("michael")
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(u3)

	fmt.Println("Done...")
}
